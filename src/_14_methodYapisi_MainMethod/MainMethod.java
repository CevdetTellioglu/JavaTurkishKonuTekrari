package _14_methodYapisi_MainMethod;

public class MainMethod {
   /*
    public static void main(String[] args) {
    }
    Bir java programÄ±nÄ±n baÅŸlatÄ±labilmesi iÃ§in main metot olmasÄ± ÅŸarttÄ±r.
    Bir Ã¶nceki dersimizde bir metotâ€™u nasÄ±l Ã§aÄŸÄ±rÄ±caÄŸÄ±mÄ±zÄ± gÃ¶stermiÅŸtik.
    Bir metotu Ã§aÄŸÄ±rarak o metotu baÅŸlatmÄ±ÅŸ oluyoruz ve iÃ§inde gerekli
    iÅŸlemleri yapÄ±yoruz. Main metotta aynÄ± mantÄ±k. Java programÄ±nÄ±n baÅŸlamasÄ±
    ve iÅŸlemleri yapmasÄ± iÃ§in JVM (Java Virtual Machine) tarafÄ±ndan Ã§aÄŸÄ±rÄ±lÄ±r
    main metot. BasitÃ§e ÅŸÃ¶yle anlatabiliriz, siz bir java uygulamasÄ±nÄ±
    bilgisayarÄ±nÄ±zda baÅŸlatmak iÃ§in Ã§ift tÄ±kladÄ±nÄ±z, iÅŸte bu anda JVM
    programÄ±nÄ±zÄ± baÅŸlatmak iÃ§in yazmÄ±ÅŸ olduÄŸunuz kodlarÄ±nÄ±z arasÄ±ndan
    main metotu Ã§aÄŸÄ±rÄ±r ve programÄ±nÄ±zÄ± main metottan baÅŸlatÄ±r.
    Ä°ÅŸte bundan dolayÄ± bir programda sadece bir main metot olabilir.
    Birden fazla olmasÄ± durumunda JVM hangisini Ã§aÄŸÄ±racaÄŸÄ±nÄ± bilemeyeceÄŸi
    iÃ§in compile error verir kodlarÄ±nÄ±z ve derlenemez.

    Main metot her zaman public static modifierâ€™Ä± ile baÅŸlar ve bir
    parametre geri dÃ¶nmez. DolayÄ±sÄ±yla void metottur. Metotun adÄ± mainâ€˜dir
    Parametre olarakta String tipinde array alÄ±r.

    public static void main(String [] args)

    Not : Arrayleri  ve modifierâ€™larÄ± (public,private,protected,static ..)
    ilerleyen derslerimizde Ã¶ÄŸreneceÄŸiz.
    */

    //Metot YapÄ±sÄ±

    /*
    Metotlar dÃ¶nÃ¼ÅŸ tiplerine gÃ¶re ikiye ayrÄ±lÄ±yordu. Parametre dÃ¶nenler
    ve parametre dÃ¶nmeyen(void) metotlar . Metot tanÄ±mlamasÄ± yaparken
    bunuda(paramtre dÃ¶necekse tipini, dÃ¶nmeyecekse void) tanÄ±mlÄ±yoruz.
    AÅŸaÄŸÄ±da parametre dÃ¶nmeyen(void) metota Ã¶rnek veriyorum.

    public static void metotAdi(parametreler) {
    //iÅŸlemler
    }

    YukarÄ±daki metot tanÄ±mlamasÄ± void metota Ã¶rnektir.
    Void olan bir metot geriye bir deÄŸer dÃ¶nmemektedir.

    public static String metotAdi(parametreler) {
    //iÅŸlemler
    return stringvalue;
     }

     YukarÄ±daki metotta ise return komutu ile geriye String deÄŸer
     dÃ¶nÃ¼lmektedir. Zaten metot tanÄ±mlamasÄ± yaparkende geriye String
     deÄŸer dÃ¶neceÄŸi bilgisini veriyoruz.  Bu  metot geriye herhangi
     bir deÄŸer dÃ¶nmezse veya String dÄ±ÅŸÄ±nda bir veri geriye dÃ¶ndÃ¼rÃ¼rse
     kodumuz  hata verecektir.

     Return komutunu kullanÄ±rken dikkat edeceÄŸimiz bir husus ise eÄŸer
     return komutunu if yapÄ±sÄ± iÃ§inde kullanÄ±yorsak , kesinlikle else â€˜de
     ekleyip return komutunu elseâ€™de eklememeiz gerekmektedir.
     AÅŸaÄŸÄ±da yanlÄ±ÅŸ bir kullanÄ±mÄ± gÃ¶stereceÄŸim.

     public static int deger(int x){

      if(x>0 && x<10)
      return x;
      else if(x>=10 && x<50)
      return x*10;
      else if(x>=50)
      return x*50;

      }

      YukarÄ±daki kod yanlÄ±ÅŸ bir kullanÄ±mdÄ±r ve hata verecektir.
      Ã‡Ã¼nkÃ¼  return komutuna eriÅŸemeyebilir ve geriye bir deÄŸer dÃ¶nemez.
      BÃ¶yle bir durumda zaten kullandÄ±ÄŸÄ±mÄ±z ide bizi uyaracaktÄ±r ve kodun
      en sonuna return eklememizi isteyecektir. YukarÄ±daki kodun doÄŸru
      kullanÄ±mÄ± ÅŸu ÅŸekildedir ve hata vermeyecektir.

      public static int deger(int x){

      if(x>0 && x<10)
      return x;
      else if(x>=10 && x<50)
      return x*10;
      else
      return x*50;
      }

      Ã‡Ã¼nkÃ¼ her durumda return komutu Ã§alÄ±ÅŸacaktÄ±r.

      Ek olarak ÅŸundan bahsetmek istiyorum. Return komutu sadece parametre
      dÃ¶nen metotlarda deÄŸil void metotlarda da kullanÄ±labilir.
      NasÄ±l olacak o iÅŸ ve ne iÅŸimize yarayacak dediÄŸinizi duyar gibiyim
      ðŸ™‚ KÄ±saca ÅŸÃ¶yle anlatayÄ±m. Bir metotunuz var ve belli iÅŸlemler yapÄ±yor.
      Ama siz belli koÅŸullarda artÄ±k metottan Ã§Ä±kÄ±lmasÄ±nÄ± istiyorsunuz.
      Bu durumda aynÄ± dÃ¶ngÃ¼lerden break komutu ile Ã§Ä±ktÄ±ÄŸÄ±mÄ±z gibi metotlardan
      da return komutu ile Ã§Ä±kabiliriz

      Ã–rneÄŸin:
      public static void bolmeIslemi(int bolen,int bolunen){
      ///eÄŸer bolen sayÄ± 0'a eÅŸit olursa kod hata verecektir. DolayÄ±sÄ±yla kontrol etmemiz gerekir
      if(bolen == 0)
      return; //metot burada durur ve aÅŸaÄŸÄ±daki iÅŸlemler yapÄ±lmaz

      int sonuc = bolunen/bolen;
      System.out.println("SonuÃ§ ="+sonuc);
      }

      Overload metotlarÄ±n ne olduÄŸunu bir Ã¶nceki dersimizde bahsetmiÅŸtik.
      Overloading olayÄ± javanÄ±n bize sunduÄŸu gÃ¼zelliklerden birisi.
      AynÄ± metot adÄ± ile farklÄ± parametreler ile aynÄ± iÅŸlemi yapacak
      metotlarÄ± Ã§aÄŸÄ±rabiliriz. Ã–rneÄŸin toplama iÅŸlemi yapan bir metotumuz
      var . AdÄ± da topla metotu olsun. Bu metotu hem int, hem double
      parametre alacak ÅŸekilde set edelim.

      public static int topla(int x, int y){
      return x+y;
      }
      public static double topla(double x, double y){
      return x+y;
      }

      Biz topla(3,4) (int deÄŸer dÃ¶neni Ã§aÄŸÄ±rÄ±r) veya topla(3.0 , 4.0)
      (double deÄŸer dÃ¶neni Ã§aÄŸÄ±rÄ±r) ÅŸeklinde metotlarÄ± Ã§aÄŸÄ±rdÄ±ÄŸÄ±mÄ±zda
      hangi metotun Ã§aÄŸÄ±rÄ±lcaÄŸÄ±na compiler karar vermekte ve uygun olan
      metotu Ã§aÄŸÄ±rmaktadÄ±r. Mesala topla(3 , 4.0) ÅŸeklinde Ã§aÄŸÄ±rdÄ±ÄŸÄ±mÄ±zda
      metotu double deÄŸer dÃ¶nen metot Ã§aÄŸÄ±rÄ±lacak ve 3 deÄŸeri otomatik olarak
      3.0 deÄŸerine dÃ¶ndÃ¼rÃ¼lecektir.

      SayalÄ±m ki elimizde aÅŸaÄŸÄ±daki gibi iki metot bulunmakta.

      public static double topla(int x ,double y){
      return x+y;
      }
      public static double topla(double x ,int y){
      return x+y;
      }

      YukarÄ±daki metotlardan ilkini topla(3 , 4.0) seklinde ikincisini
      ise topla(3.0 , 4) ÅŸeklinde Ã§aÄŸÄ±rabiliriz. Peki topla(3 , 4)
      ÅŸeklinde Ã§aÄŸÄ±rsak topla metotunu hangisini Ã§aÄŸÄ±racak compiler ?
      burada compiler hangisini seÃ§eceÄŸine karar veremiyeceÄŸi iÃ§in
      error verecektir. Bu nedenle overloading yaparken metotlarÄ±
      compilerâ€™Ä±n karar veremeyeceÄŸi durumlarÄ± iyi dÃ¼ÅŸÃ¼nerek parametre
      seÃ§imleri dikkatli yapÄ±lmalÄ±dÄ±r.

      Son olarak ÅŸu unutulmamalÄ±dÄ±r ki bir metota gÃ¶nderdiÄŸimiz argÃ¼mentler
      (javada metota gÃ¶nderilen parametreler argÃ¼ment olarak adlandÄ±rÄ±lÄ±r)
       deÄŸerleri metotta hangi iÅŸlem yapÄ±lÄ±rsa yapÄ±lsÄ±n deÄŸiÅŸmeyecektir.
       Ne demek istediÄŸimi aÅŸaÄŸÄ±daki kodda anlayacaksÄ±nÄ±z.


     */

    public static void main(String args[]) {
        int x = 5;
        int y = 7;

        System.out.println("Metot'a girmeden Ã¶nce :"+"x ="+x+" y ="+y);

        deneme(5,7);

        System.out.println("Metot'tan Ã§Ä±kÄ±nca :"+"x ="+x+" y ="+y);


    }
    public static void deneme(int x,int y){

        System.out.println("Metot'un iÃ§i iÅŸlemlerden Ã¶nce :"+"x ="+x+" y ="+y);
        x += 5;
        y +=15;
        System.out.println("Metot'un iÃ§i iÅŸlemlerden sonra :"+"x ="+x+" y ="+y);


    }

    /*
    OUTPUT:
Metot'a girmeden Ã¶nce :x =5 y =7
Metot'un iÃ§i iÅŸlemlerden Ã¶nce :x =5 y =7
Metot'un iÃ§i iÅŸlemlerden sonra :x =10 y =22
Metot'tan Ã§Ä±kÄ±nca :x =5 y =7
     */

    /*
    GÃ¶rdÃ¼ÄŸÃ¼nÃ¼z gibi gÃ¶nderdiÄŸimiz argÃ¼mentler metotta farklÄ± iÅŸlemlerede
    girse deÄŸerleri deÄŸiÅŸmedi Ã§Ã¼nkÃ¼ metotâ€™un iÃ§indeki x, y yeni deÄŸiÅŸkenler
    oluyor ve metot Ã§aÄŸrÄ±lÄ±rken gÃ¶nderilen parametrelerle ilgisi bulunmuyor.
     */








}
